; Camera capture PIO program for OV2640
; Captures 8-bit parallel data on PCLK edges when HREF is active

.program cam_cap

.wrap_target
    ; Wait for HREF high (line start)
    wait 1 gpio 5        ; wait HREF (GP5) == 1
    
pixel_loop:
    ; Wait for PCLK rising edge
    wait 1 gpio 2        ; wait PCLK (GP2) == 1
    in pins, 8           ; shift in 8 bits from D0-D7
    
    ; Check if HREF is still high (more pixels in this line)
    jmp pin pixel_loop   ; if HREF still high, get next pixel
    
    ; HREF went low - end of line, wait for next line
.wrap

% c-sdk {
static inline void cam_cap_program_init(PIO pio, uint sm, uint offset, 
                                        uint data_pin_base, uint href_pin, uint pclk_pin) {
    pio_sm_config c = cam_cap_program_get_default_config(offset);
    
    // Configure IN pins (data pins D0-D7)
    sm_config_set_in_pins(&c, data_pin_base);
    sm_config_set_in_shift(&c, true, true, 8); // shift right, autopush every 8 bits
    
    // Configure JMP pin (HREF)
    sm_config_set_jmp_pin(&c, href_pin);
    
    // No clock divider - run as fast as possible
    sm_config_set_clkdiv(&c, 1.0f);
    
    // Initialize pins as inputs
    for (int pin = data_pin_base; pin < data_pin_base + 8; ++pin) {
        pio_gpio_init(pio, pin);
        pio_sm_set_pindirs_with_mask(pio, sm, 0, 1u << pin);
    }
    pio_gpio_init(pio, href_pin);
    pio_gpio_init(pio, pclk_pin);
    pio_sm_set_pindirs_with_mask(pio, sm, 0, (1u << href_pin) | (1u << pclk_pin));
    
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}